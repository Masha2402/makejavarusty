calculateButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            double weight = Double.parseDouble(weightField.getText());
            double height = Double.parseDouble(heightField.getText();

            if (weight <= 0 || height <= 0) {
                resultLabel.setText("Gewicht und Größe müssen positiv sein.");
                return; // Die Berechnung wird nicht durchgeführt
            }

            String gender = genderField.getText();

            // Verbindung zum Rust-Backend herstellen
            try (Socket socket = new Socket("localhost", 12345);
                 ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                 ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {

                UserInput userInput = new UserInput(weight, height, gender);
                out.writeObject(userInput);

                ProteinRequirements result = (ProteinRequirements) in.readObject();
                resultLabel.setText("Benötigte Eiweißmenge: " + result.result + " g pro Tag");
            } catch (IOException ex) {
                resultLabel.setText("Fehler bei der Kommunikation mit dem Backend.");
            } catch (ClassNotFoundException ex) {
                resultLabel.setText("Ungültige Antwort vom Backend.");
            }
        } catch (NumberFormatException ex) {
            resultLabel.setText("Ungültige Eingabe. Bitte geben Sie positive Zahlen ein.");
        }
    }
});
